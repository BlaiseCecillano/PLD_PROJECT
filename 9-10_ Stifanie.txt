#! C:\Users\Willy\PLD_Final-Project\scriptenv\Scripts\python.exe

import os
import time
import numpy as np

def start_feature():
    print("Welcome to the Transcript Generation System")
    level = input("Select student level (U for Undergraduate, G for Graduate, B for Both): ").strip().upper()
    if level not in ['U', 'G', 'B']:
        print("Invalid selection. Please try again.")
        return start_feature()

    degree = None
    if level in ['G', 'B']:
        degree = input("Select degree (M for Master, D for Doctorate, B0 for Both): ").strip().upper()
        if degree not in ['M', 'D', 'B0']:
            print("Invalid selection. Please try again.")
            return start_feature()

    print("Loading menu...")
    time.sleep(2)
    menu_feature()

def menu_feature():
    menu_options = {
        1: "Student Details",
        2: "Statistics",
        3: "Transcript Based on Major Courses",
        4: "ranscript Based on Minor Courses",
        5: "Full Transcript",
        6: "Previous Transcript Requests",
        7: "Select another Student",
        8: "Terminate the System"
    }

    print("\n--- Student Transcript Generation System ---")
    print("\n=============================================")
    for key, value in menu_options.items():
        print(f"{key}. {value}")
    print("=============================================")
    
    try:
        choice = int(input("Enter your choice (1-8): ").strip())
        if choice not in menu_options:
            raise ValueError("Invalid option.")
    except ValueError as e:
        print(e)
        return menu_feature()

    if choice == 1:
        details_feature()
    elif choice == 2:
        statistics_feature()
    elif choice == 3:
        major_transcript_feature()
    elif choice == 4:
        minor_transcript_feature()
    elif choice == 5:
        full_transcript_feature()
    elif choice == 6:
        previous_requests_feature()
    elif choice == 7:
        new_student_feature()
    elif choice == 8:
        terminate_feature()

def details_feature():
    student_id = input("Enter student ID: ").strip()

    try:
        data = np.loadtxt("studentDetails.csv", delimiter=",", dtype=str)

        # Strip whitespace from the student IDs in the CSV data
        data[:, 1] = np.char.strip(data[:, 1])

        student_data = data[data[:, 1] == student_id]

        if student_data.size == 0:
            raise ValueError("Student ID not found.")
    
        
        print(f"Filtered student data: {student_data}")

        with open(f"{student_id}details.txt", "w") as file:
            for record in student_data:
                line = f"\nName: {record[2]}\nstdID: {record[1]}\nLevel(s): {record[5]}\nNumber of Terms: {record[9]}\nCollege(s): {record[3]}\nDepartment: {record[4]}\n"
                print(line, end="")
                file.write(line)

        print("Details saved to file.")
        time.sleep(30)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        menu_feature()

def statistics_feature():
    student_id = input("Enter student ID: ").strip()
    try:
        filename = f"{student_id}.csv"
        data = np.loadtxt(filename, delimiter=",", dtype=float, skiprows=1)
        averages = np.mean(data[:, 1:], axis=0)

        with open(f"{student_id}statistics.txt", "w") as file:
            for i, avg in enumerate(averages, 1):
                line = f"Term {i} Average: {avg:.2f}\n"
                print(line, end="")
                file.write(line)

        print("Statistics saved to file.")
        time.sleep(2)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        menu_feature()

def major_transcript_feature():
    student_id = input("Enter student ID: ").strip()
    try:
        filename = f"{student_id}.csv"
        data = np.loadtxt(filename, delimiter=",", dtype=float, skiprows=1)

        with open(f"{student_id}MajorTranscript.txt", "w") as file:
            for i, row in enumerate(data, 1):
                avg = np.mean(row[1:])
                line = f"Term {i}: Major Courses Average: {avg:.2f}\n"
                print(line, end="")
                file.write(line)

        print("Major transcript saved to file.")
        time.sleep(2)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        menu_feature()

def minor_transcript_feature():
    student_id = input("Enter student ID: ").strip()
    # Similar to major_transcript_feature but focusing on minor courses.
    pass

def full_transcript_feature():
    student_id = input("Enter student ID: ").strip()
    # Combine major and minor transcript features.
    pass

def previous_requests_feature():
    student_id = input("Enter student ID: ").strip()
    # Retrieve and display previous requests.
    pass

def new_student_feature():
    print("Starting new student session...")
    time.sleep(2)
    start_feature()

def terminate_feature():
    print("Terminating the program. Goodbye!")
    exit()

if __name__ == "__main__":
    start_feature()
